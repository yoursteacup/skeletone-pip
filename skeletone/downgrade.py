import json
import os
import re
import subprocess

import requests
from rich.console import Console
from rich.prompt import Prompt

console = Console()

SKELETON_REPO = "https://github.com/yoursteacup/skeletone"
PROJECT_PATH = os.getcwd()
PATCHES_BASE_URL = "https://raw.githubusercontent.com/yoursteacup/skeletone/main/patches/"


def get_available_versions():
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π (—Ç–µ–≥–æ–≤) –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    """
    api_url = "https://api.github.com/repos/yoursteacup/skeletone/tags"
    r = requests.get(api_url)
    if r.status_code != 200:
        raise Exception(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π: {r.text}")

    tags = r.json()
    versions = [tag["name"] for tag in tags]
    return sorted(versions, reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º


def get_current_version():
    """
    –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ skeletone.lock
    """
    lock_file = os.path.join(PROJECT_PATH, "skeletone.lock")
    if not os.path.exists(lock_file):
        raise Exception("–§–∞–π–ª skeletone.lock –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–µ–∫—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ skeletone.")

    with open(lock_file) as f:
        lock = json.load(f)
    return lock["template_version"]


def get_all_patch_names():
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ç—á–µ–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    """
    api_url = "https://api.github.com/repos/yoursteacup/skeletone/contents/patches"
    r = requests.get(api_url)
    if r.status_code != 200:
        raise Exception(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—á–µ–π: {r.text}")
    files = r.json()
    patch_names = [f["name"] for f in files if f["name"].endswith(".patch")]
    return sorted(patch_names)


def build_downgrade_patch_chain(current_ver, target_ver, patch_names):
    """
    –°—Ç—Ä–æ–∏–º —Ü–µ–ø–æ—á–∫—É –ø–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –æ—Ç current_ver –∫ target_ver
    """
    chain = []
    cur_ver = current_ver

    while cur_ver != target_ver:
        found = False
        # –ò—â–µ–º –ø–∞—Ç—á, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
        for fname in patch_names:
            m = re.match(rf"(v[\d\.]+)_to_{re.escape(cur_ver)}\.patch$", fname)
            if m:
                prev_ver = m.group(1)
                chain.append((fname, prev_ver))
                cur_ver = prev_ver
                found = True
                break

        if not found:
            raise Exception(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å –æ—Ç–∫–∞—Ç–∞ –æ—Ç {current_ver} –∫ {target_ver}")

    return chain


def download_and_apply_reverse_patch(patch_name):
    """
    –°–∫–∞—á–∏–≤–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    """
    url = PATCHES_BASE_URL + patch_name
    console.print(f"[bold green]‚¨á –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞—Ç—á–∞: {patch_name}[/bold green]")
    r = requests.get(url)
    if r.status_code != 200:
        raise Exception(f"–ù–µ —É–¥–∞–µ—Ç—Å—è —Å–∫–∞—á–∞—Ç—å –ø–∞—Ç—á {patch_name}")

    patch_file = "tmp_skeletone_downgrade.patch"
    with open(patch_file, "wb") as f:
        f.write(r.content)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (-R –∏–ª–∏ --reverse)
    result = subprocess.run(["git", "apply", "--reverse", patch_file])
    os.remove(patch_file)

    if result.returncode != 0:
        raise Exception(f"‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–∞—Ç—á–∞ {patch_name}!")


def downgrade_to_version(target_version, force=False):
    """
    –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—Ä–∞—Ç–Ω—ã–µ –ø–∞—Ç—á–∏
    """
    current_version = get_current_version()

    if current_version == target_version:
        console.print(f"[bold yellow]–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤–µ—Ä—Å–∏—é {target_version}[/bold yellow]")
        return

    available_versions = get_available_versions()
    if target_version not in available_versions:
        console.print(f"[bold red]–í–µ—Ä—Å–∏—è {target_version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞![/bold red]")
        console.print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏: {', '.join(available_versions)}")
        return

    if not force:
        console.print(f"[bold yellow]‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–∫–∞—Ç —Å {current_version} –Ω–∞ {target_version}[/bold yellow]")
        console.print("[bold yellow]–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–∞—Ç–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –æ–±—Ä–∞—Ç–Ω—ã—Ö –ø–∞—Ç—á–µ–π![/bold yellow]")

        confirm = Prompt.ask(
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N)",
            choices=["y", "n", "yes", "no"],
            default="n"
        )

        if confirm.lower() not in ["y", "yes"]:
            console.print("[bold red]–û—Ç–∫–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω[/bold red]")
            return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—á–µ–π –∏ —Å—Ç—Ä–æ–∏–º —Ü–µ–ø–æ—á–∫—É –¥–ª—è –æ—Ç–∫–∞—Ç–∞
        patch_names = get_all_patch_names()
        chain = build_downgrade_patch_chain(current_version, target_version, patch_names)

        if not chain:
            console.print("[bold green]–£–∂–µ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Ä—Å–∏–∏[/bold green]")
            return

        console.print(f"[bold blue]–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –ø—É—Ç—å –æ—Ç–∫–∞—Ç–∞: {len(chain)} –ø–∞—Ç—á–µ–π[/bold blue]")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for patch_name, prev_ver in chain:
            console.print(f"[bold green]‚è™ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–∞—Ç—á–∞: {patch_name}[/bold green]")
            download_and_apply_reverse_patch(patch_name)

            # –û–±–Ω–æ–≤–ª—è–µ–º skeletone.lock –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—á–∞
            lock = {
                "template_repo": SKELETON_REPO,
                "template_version": prev_ver
            }
            with open(os.path.join(PROJECT_PATH, "skeletone.lock"), "w") as f:
                json.dump(lock, f, indent=2)

            console.print(f"[bold green]‚úÖ –û—Ç–∫–∞—á–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ {prev_ver}[/bold green]")

        console.print(f"[bold green]üéâ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞—á–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ {target_version}![/bold green]")

    except Exception as e:
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ: {e}[/bold red]")
        console.print("[bold yellow]–í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤[/bold yellow]")


def list_available_versions():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
    """
    try:
        current_version = get_current_version()
        versions = get_available_versions()

        console.print("[bold blue]üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏:[/bold blue]")
        for version in versions:
            if version == current_version:
                console.print(f"  {version} [bold green](—Ç–µ–∫—É—â–∞—è)[/bold green]")
            else:
                console.print(f"  {version}")

    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞: {e}[/bold red]")


def downgrade_skeletone(target_version=None, force=False):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–∞
    """
    try:
        if target_version is None:
            list_available_versions()
            target_version = Prompt.ask("\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –æ—Ç–∫–∞—Ç–∞")

        downgrade_to_version(target_version, force)

    except Exception as e:
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ: {e}[/bold red]")